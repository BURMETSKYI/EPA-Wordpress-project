name: Deploy DevEnv EC2-RDS

on:
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual trigger'
        required: false
        default: 'Triggered via Telegram'
     
jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: Development
    env:
      STACK_NAME: ""
      SNAPSHOT_ARN: "arn:aws:rds:eu-west-2:891377327225:snapshot:dev"
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy CloudFormation stack
        id: deploy-stack
        run: |
          STACK_NAME="WP-DEV-$(date +'%Y%m%d-%H%M%S')"
          echo "STACK_NAME=$STACK_NAME" >> $GITHUB_ENV
          
          # Ensure STACK_NAME is not empty
          if [ -z "$STACK_NAME" ]; then
            echo "Error: STACK_NAME is empty."
            exit 1
          fi
          
          # Handle existing instance
          INSTANCE_ID=$(aws ec2 describe-addresses \
            --allocation-ids eipalloc-092e331c98b8b9bfa \
            --query 'Addresses[0].InstanceId' \
            --output text)
          
          if [ "$INSTANCE_ID" != "None" ]; then
            echo "Terminating instance: $INSTANCE_ID"
            aws ec2 terminate-instances --instance-ids "$INSTANCE_ID" || {
              echo "Failed to terminate instance"
              exit 1
            }
            aws ec2 wait instance-terminated --instance-ids "$INSTANCE_ID"
          fi
          
          # Deploy stack
          echo "Deploying stack: $STACK_NAME"
          if ! aws cloudformation deploy \
            --template-file ./dev/CloudFormation.yml \
            --stack-name "$STACK_NAME" \
            --parameter-overrides SnapshotId="$SNAPSHOT_ARN" \
            --capabilities CAPABILITY_IAM \
            2>&1 | tee deploy.log; then
            
            echo "Deployment failed. Last events:"
            aws cloudformation describe-stack-events \
              --stack-name "$STACK_NAME" \
              --query 'StackEvents[0:5].[ResourceStatus,ResourceStatusReason]' \
              --output table
            exit 1
          fi

      - name: Get RDS Endpoint
        id: get-endpoint
        if: success()
        run: |
          ENDPOINT=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --query 'Stacks[0].Outputs[?OutputKey==`RDSEndpoint`].OutputValue' \
            --output text)
          
          if [ -z "$ENDPOINT" ]; then
            echo "Error: Failed to get RDS endpoint"
            exit 1
          fi
          
          echo "RDS_ENDPOINT=$ENDPOINT" >> $GITHUB_ENV

      - name: Authenticate GitHub CLI
        run: |
          # Clear GITHUB_TOKEN to avoid conflict with gh auth login
          unset GITHUB_TOKEN
          gh auth login --with-token <<< "${{ secrets.GH_PAT }}"
          
      - name: Save RDS Endpoint as Secret using GitHub CLI
        run: |
          echo "Saving RDS Endpoint to GitHub Secrets..."
          gh secret set RDS_ENDPOINT --env Development --body "${{ env.RDS_ENDPOINT }}" || {
            echo "Failed to update secret"
            exit 1
          }

      - name: Verify deployment
        if: success()
        run: |
          echo "Stack Outputs:"
          aws cloudformation describe-stacks \
            --stack-name "${{ env.STACK_NAME }}" \
            --query 'Stacks[0].Outputs' \
            --output table
          
          echo "RDS Endpoint saved: ${{ env.RDS_ENDPOINT }}"
