name: Development 

#on:
 # workflow_run:
#    workflows:
#      - GreenEnv Deploy CloudFormation Stack
 #   types:
#      - completed

on:
  push:
    branches:
      - main 
  
jobs:
  deploy_to_dev:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    environment: Development  

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up SSH private key
      run: |
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key
        chmod 600 private_key
        echo "Private key set up successfully."

    - name: Debug SSH connection
      env:
        ELASTIC_IP: ${{ secrets.ELASTIC_IP_DEV }}
        SSH_USERNAME: ${{ secrets.SSH_USERNAME_DEV }}
        SSH_PORT: ${{ secrets.SSH_PORT_DEV }}
      run: |
        echo "Testing SSH connection to $ELASTIC_IP as $SSH_USERNAME on port $SSH_PORT..."
        ssh -vvv -i private_key -o StrictHostKeyChecking=no -p $SSH_PORT $SSH_USERNAME@$ELASTIC_IP "echo 'SSH Connection Successful'"

    - name: Edit CF Variables
      env:
        ELASTIC_IP: ${{ secrets.ELASTIC_IP_DEV }}
        SSH_USERNAME: ${{ secrets.SSH_USERNAME_DEV }}
        SSH_PORT: ${{ secrets.SSH_PORT_DEV }}
        SECRET_CF_API: ${{ secrets.SECRET_CF_API }}
        CF_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
        EMAIL: ${{ secrets.EMAIL }}
        DOMAIN: ${{ secrets.DOMAIN }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        S_STORAGE_URL: ${{ secrets.S_STORAGE_URL }}
        
      run: |
        echo "Editing Cloudflare variables in lemp-setup.sh..."
        sed -i "s/S_DOMAIN/$DOMAIN/g" ./dev/lemp-setup.sh
        sed -i "s/S_ELASTIC_IP/$ELASTIC_IP/g" ./dev/lemp-setup.sh
        sed -i "s/S_CF_API/$SECRET_CF_API/g" ./dev/lemp-setup.sh
        sed -i "s/S_CF_ZONE_ID/$CF_ZONE_ID/g" ./dev/lemp-setup.sh
        cat ./dev/lemp-setup.sh  # Print file contents to confirm the edits
        
        echo "Editing Cloudflare variables in certbot-ssl-install.sh..."
        sed -i "s/S_EMAIL/$EMAIL/g" ./dev/certbot-ssl-install.sh
        sed -i "s/S_DOMAIN/$DOMAIN/g" ./dev/certbot-ssl-install.sh
        cat ./dev/certbot-ssl-install.sh  # Print file contents to confirm the edits

        echo "Editing Cloudflare variables in cloudflare-dns.sh..."
        sed -i "s/S_DOMAIN/$DOMAIN/g" ./dev/cloudflare-dns.sh
        sed -i "s/S_ELASTIC_IP/$ELASTIC_IP/g" ./dev/cloudflare-dns.sh
        sed -i "s/S_CF_API/$SECRET_CF_API/g" ./dev/cloudflare-dns.sh
        sed -i "s/S_CF_ZONE_ID/$CF_ZONE_ID/g" ./dev/cloudflare-dns.sh
        cat ./dev/cloudflare-dns.sh  # Print file contents to confirm the edits

        echo "Editing MariaDB variables in wordpress-install.sh..."
        sed -i "s/DB_PASSWORD/$DB_PASSWORD/g" ./dev/wordpress-install.sh
        sed -i "s/DB_USERNAME/$DB_USERNAME/g" ./dev/wordpress-install.sh
        sed -i 's/RDS_ENDPOINT/${{ secrets.RDS_ENDPOINT }}/g' ./dev/wordpress-install.sh
        cat ./dev/wordpress-install.sh  # Print file contents to confirm the edits
        
        echo "Editing persistent storage variables in storage-setup.sh..."
        sed -i "s|STORAGE_URL|$S_STORAGE_URL|g" ./dev/storage-setup.sh
        cat ./dev/storage-setup.sh  # Print file contents to confirm the edits
        
    - name: Copy files to Development VM
      env:
        ELASTIC_IP: ${{ secrets.ELASTIC_IP_DEV }}
        SSH_USERNAME: ${{ secrets.SSH_USERNAME_DEV }}
        SSH_PORT: ${{ secrets.SSH_PORT_DEV }}
      run: |
        echo "Starting file transfer to Development VM..."
   
        # Check and remove existing directory if it exists
        echo "Checking for existing EPA-Wordpress-project directory..."
        if ssh -i private_key -o StrictHostKeyChecking=no -p $SSH_PORT $SSH_USERNAME@$ELASTIC_IP "test -d ~/EPA-Wordpress-project"; then
          echo "Found existing directory, removing it..."
          ssh -i private_key -o StrictHostKeyChecking=no -p $SSH_PORT $SSH_USERNAME@$ELASTIC_IP "sudo rm -rf ~/EPA-Wordpress-project"
        fi
     
        # Copy files using rsync
        echo "Copying files..."
        if rsync -avz -e "ssh -i private_key -o StrictHostKeyChecking=no -p $SSH_PORT" \
          --exclude '.git' \
          --exclude 'node_modules' \
          --exclude '.env' \
          --exclude 'private_key' \
          --exclude '.github' \
          "${PWD}/" $SSH_USERNAME@$ELASTIC_IP:~/EPA-Wordpress-project/; then
          echo "Files copied successfully"
        else
          echo "Error: File transfer failed"
          exit 1
        fi
        
        # Verify file transfer
        echo "Verifying file transfer..."
        if ssh -i private_key -o StrictHostKeyChecking=no -p $SSH_PORT $SSH_USERNAME@$ELASTIC_IP "test -d ~/EPA-Wordpress-project/ && [ -n \"$(ls -A ~/EPA-Wordpress-project/)\" ]"; then
          echo "Directory verification successful and not empty"
        else
          echo "Error: Target directory not found or empty after transfer"
          exit 1
        fi

    - name: Run git-setup.sh on the VM
      env:
        ELASTIC_IP: ${{ secrets.ELASTIC_IP_DEV }}
        SSH_USERNAME: ${{ secrets.SSH_USERNAME_DEV }}
        SSH_PORT: ${{ secrets.SSH_PORT_DEV }}
      run: |
        echo "Running git-setup.sh on VM..."
        ssh -i private_key -o StrictHostKeyChecking=no -p $SSH_PORT $SSH_USERNAME@$ELASTIC_IP 'sudo bash /home/ubuntu/EPA-Wordpress-project/dev/git-setup.sh || { echo "Script failed"; exit 1; }' 
        echo "Script executed successfully."

    - name: Run lemp-setup.sh on the VM
      env:
        ELASTIC_IP: ${{ secrets.ELASTIC_IP_DEV }}
        SSH_USERNAME: ${{ secrets.SSH_USERNAME_DEV }}
        SSH_PORT: ${{ secrets.SSH_PORT_DEV }}
      run: |
        echo "Running lemp-setup.sh on VM..."
        ssh -i private_key -o StrictHostKeyChecking=no -p $SSH_PORT $SSH_USERNAME@$ELASTIC_IP 'sudo bash /home/ubuntu/EPA-Wordpress-project/dev/lemp-setup.sh || { echo "Script failed"; exit 1; }'
        echo "Script executed successfully."

    - name: Run cloudflare-dns.sh on the VM
      env:
        ELASTIC_IP: ${{ secrets.ELASTIC_IP_DEV }}
        SSH_USERNAME: ${{ secrets.SSH_USERNAME_DEV }}
        SSH_PORT: ${{ secrets.SSH_PORT_DEV }}
      run: |
        echo "Running cloudflare-dns.sh on VM..."
        ssh -i private_key -o StrictHostKeyChecking=no -p $SSH_PORT $SSH_USERNAME@$ELASTIC_IP 'sudo bash /home/ubuntu/EPA-Wordpress-project/dev/cloudflare-dns.sh || { echo "Script failed"; exit 1; }'
        echo "Script executed successfully."
    
    - name: Run wordpress-install.sh on the VM
      env:
        ELASTIC_IP: ${{ secrets.ELASTIC_IP_DEV }}
        SSH_USERNAME: ${{ secrets.SSH_USERNAME_DEV }}
        SSH_PORT: ${{ secrets.SSH_PORT_DEV }}
      run: |
        echo "Running wordpress-install.sh on VM..."
        ssh -i private_key -o StrictHostKeyChecking=no -p $SSH_PORT $SSH_USERNAME@$ELASTIC_IP 'sudo bash /home/ubuntu/EPA-Wordpress-project/dev/wordpress-install.sh || { echo "Script failed"; exit 1; }'
        echo "Script executed successfully."

    - name: Run storage-setup.sh on the VM
      uses: nick-invision/retry@v2
      env:
        ELASTIC_IP: ${{ secrets.ELASTIC_IP_DEV }}
        SSH_USERNAME: ${{ secrets.SSH_USERNAME_DEV }}
        SSH_PORT: ${{ secrets.SSH_PORT_DEV }}
      with:
        timeout_minutes: 10
        max_attempts: 3
        retry_wait_seconds: 30
        warning_on_retry: true
        command: |
          echo "Running storage-setup.sh on VM..."
          ssh -i private_key -o StrictHostKeyChecking=no -p $SSH_PORT $SSH_USERNAME@$ELASTIC_IP 'sudo bash /home/ubuntu/EPA-Wordpress-project/dev/storage-setup.sh || { echo "Script failed"; exit 1; }'
          echo "Script executed successfully."
          
    - name: Run certbot-ssl-install.sh on the VM
      env:
        ELASTIC_IP: ${{ secrets.ELASTIC_IP_DEV }}
        SSH_USERNAME: ${{ secrets.SSH_USERNAME_DEV }}
        SSH_PORT: ${{ secrets.SSH_PORT_DEV }}
      run: |
        echo "Running certbot-ssl-install.sh on VM..."
        ssh -i private_key -o StrictHostKeyChecking=no -p $SSH_PORT $SSH_USERNAME@$ELASTIC_IP 'sudo bash /home/ubuntu/EPA-Wordpress-project/dev/certbot-ssl-install.sh || { echo "Script failed"; exit 1; }'
        echo "Script executed successfully."
